{
    "swagger": "2.0",
    "info": {
        "version": "2.0",
        "title": "Cardano Wallet API",
        "license": {
            "url": "http://mit.com",
            "name": "MIT"
        },
        "description": "This is the specification for the Cardano Wallet API, automatically generated\nas a [Swagger](https://swagger.io/) spec from the [Servant](http://haskell-servant.readthedocs.io/en/stable/) API\nof [Cardano](https://github.com/input-output-hk/cardano-sl).\n\n### Request format (all versions)\n\nIssuing requests against this API is conceptually not very different from any other web service out there. The API\nis versioned, meaning is possible to access different versions of the latter by changing the _version number_ in the URL.\n\nFor example, _omitting_ the version number of passing `v0` would call the version 0 of the API. Examples:\n\n```\n/api/version\n/api/v0/version\n```\n\nBoth URL above will return the same result. Compatibility between major versions is not _guaranteed_, i.e. the\nrequest & response formats might differ.\n\n### Response format (V1 onwards)\n\n**All GET requests of the API are paginated by default**. Whilst this can be a source of surprise, is\nthe best way of ensuring the performance of GET requests is not affected by the size of the data storage.\n\nVersion `V1` introduced a different way of requesting information to the API. In particular, GET requests\nwhich returns a _collection_ (i.e. typically a JSON array of resources) lists extra parameters which can be\nused to modify the shape of the response. In particular, those are:\n\n* `page`: (Default value: **1**).\n* `per_page`: (Default value: **10**)\n* `extended`: (Default value: `false`)\n* `Daedalus-Response-Format`: (Default value: `null`)\n\nFor a more accurate description, see the section `Parameters` of each GET request, but as a brief overview\nthe first two control how many results and which results to access in a paginated request. The other two\n(one to be passed as a query parameter, the other as an HTTP Header) controls the response format. By omitting\nboth, the \"naked\" collection will be returned. For example, requesting for a list of _Accounts_ might issue,\nin this case:\n\n``` json\n[\n    {\n        \"id\": \"123456\"\n    },\n    {\n        \"id\": \"DEADBeef\"\n    }\n]\n```\n\nIn the second case, instead:\n\n``` json\n{\n    \"data\": [\n        {\n            \"id\": \"DEADBeef\"\n        },\n        {\n            \"id\": \"123456\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"total_entries\": 2,\n        \"total_pages\": 1,\n        \"per_page\": 96\n    }\n}\n```\n\n### Dealing with errors (V1 onwards)\n\nIn case a request cannot be served by the API, a non-2xx HTTP response will be issue, together with a\n[JSend-compliant](https://labs.omniti.com/labs/jsend) JSON Object describing the error in detail together\nwith a numeric error code which can be used by API consumers to implement proper error handling in their\napplication. For example, here's a typical error which might be issued:\n\n``` json\n{\n    \"status\": \"error\",\n    \"code\": 449,\n    \"message\": \"The given AccountId is not correct.\"\n}\n```\n"
    },
    "definitions": {
        "WalletVersion": {
            "example": {
                "gitRev": "6f1131adca2f0bc6d24c9181cabd2b9e0704fd79",
                "version": "v0"
            },
            "required": [
                "gitRev",
                "version"
            ],
            "type": "object",
            "description": "The Wallet version, including the API version and the Git revision. Here's an example:<br><br><pre>{\n    \"gitRev\": \"6f1131adca2f0bc6d24c9181cabd2b9e0704fd79\",\n    \"version\": \"v0\"\n}</pre>",
            "properties": {
                "gitRev": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "OneOf [Account] (ExtendedResponse [Account])": {
            "example": [
                {
                    "id": "DEADBeef"
                }
            ],
            "items": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                }
            },
            "type": "array",
            "description": "OneOf <b>a</b> <b>b</b> is a type introduced to limit with Swagger 2.0's limitation of returning different types depending on the parameter of the request. While this has been fixed in OpenAPI 3, we effectively mimick its behaviour in 2.x. The idea is to return either ExtendedResponse [Account] or [Account] depending on whether or not the extended response format has been requested. Whilst using the  api this type is erased away in the HTTP response, so that, in case the user requested the 'normal'  response format, an 'a' will be returned. Here's an example:<br><br><pre>[\n    {\n        \"id\": \"123456\"\n    },\n    {\n        \"id\": \"DEADBeef\"\n    }\n]</pre> In case the user selected the extended format, a full 'ExtendedResponse' will be yielded. Here's an example:<br><br><pre>{\n    \"data\": [\n        {\n            \"id\": \"DEADBeef\"\n        },\n        {\n            \"id\": \"123456\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"total_entries\": 2,\n        \"total_pages\": 1,\n        \"per_page\": 96\n    }\n}</pre>"
        },
        "OneOf [Address] (ExtendedResponse [Address])": {
            "example": [
                {
                    "id": "DEADBeef"
                }
            ],
            "items": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                }
            },
            "type": "array",
            "description": "OneOf <b>a</b> <b>b</b> is a type introduced to limit with Swagger 2.0's limitation of returning different types depending on the parameter of the request. While this has been fixed in OpenAPI 3, we effectively mimick its behaviour in 2.x. The idea is to return either ExtendedResponse [Address] or [Address] depending on whether or not the extended response format has been requested. Whilst using the  api this type is erased away in the HTTP response, so that, in case the user requested the 'normal'  response format, an 'a' will be returned. Here's an example:<br><br><pre>[\n    {\n        \"id\": \"123456\"\n    },\n    {\n        \"id\": \"DEADBeef\"\n    }\n]</pre> In case the user selected the extended format, a full 'ExtendedResponse' will be yielded. Here's an example:<br><br><pre>{\n    \"data\": [\n        {\n            \"id\": \"DEADBeef\"\n        },\n        {\n            \"id\": \"123456\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"total_entries\": 2,\n        \"total_pages\": 1,\n        \"per_page\": 96\n    }\n}</pre>"
        },
        "Address": {
            "example": {
                "id": "DEADBeef"
            },
            "required": [
                "id"
            ],
            "type": "object",
            "description": "An Address. Here's an example:<br><br><pre>{\n    \"id\": \"DEADBeef\"\n}</pre>",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        }
    },
    "paths": {
        "/api/v1/version": {
            "get": {
                "summary": "Returns the version for this API.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V1"
                ]
            }
        },
        "/api/version": {
            "get": {
                "summary": "Returns the version for this API.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v0/version": {
            "get": {
                "summary": "Returns the version for this API.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/accounts": {
            "get": {
                "summary": "Retrieves the full list of Accounts.",
                "responses": {
                    "400": {
                        "description": "Invalid `Daedalus-Response-Format` or `extended` or `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OneOf [Account] (ExtendedResponse [Account])"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 500,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **500**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "in": "query",
                        "name": "extended",
                        "type": "boolean",
                        "description": "Informs the backend that the fetched data should be wrapped in an `ExtendedResponse`\n(see the Models section). An `ExtendedResponse` includes useful metadata\nwhich can be used by clients to support pagination.\n"
                    },
                    {
                        "in": "header",
                        "name": "Daedalus-Response-Format",
                        "type": "string",
                        "description": "It has the same effect of setting `extended=true` in the URL as a query parameter.\nIf the header `Daedalus-Response-Format` is present in the HTTP request with a value set to\n`extended`, the fetched data will be wrapped in an `ExtendedResponse`.\n"
                    }
                ],
                "tags": [
                    "Accounts",
                    "V1"
                ]
            }
        },
        "/api/v1/addresses": {
            "post": {
                "summary": "Creates a new Address.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Address"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Address"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Addresses",
                    "V1"
                ]
            },
            "get": {
                "summary": "Returns all the addresses.",
                "responses": {
                    "400": {
                        "description": "Invalid `Daedalus-Response-Format` or `extended` or `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OneOf [Address] (ExtendedResponse [Address])"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 500,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **500**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "in": "query",
                        "name": "extended",
                        "type": "boolean",
                        "description": "Informs the backend that the fetched data should be wrapped in an `ExtendedResponse`\n(see the Models section). An `ExtendedResponse` includes useful metadata\nwhich can be used by clients to support pagination.\n"
                    },
                    {
                        "in": "header",
                        "name": "Daedalus-Response-Format",
                        "type": "string",
                        "description": "It has the same effect of setting `extended=true` in the URL as a query parameter.\nIf the header `Daedalus-Response-Format` is present in the HTTP request with a value set to\n`extended`, the fetched data will be wrapped in an `ExtendedResponse`.\n"
                    }
                ],
                "tags": [
                    "Addresses",
                    "V1"
                ]
            }
        },
        "/api/v1/accounts/{account_id}": {
            "delete": {
                "summary": "Deletes an Account.",
                "responses": {
                    "404": {
                        "description": "`account_id` not found"
                    },
                    "204": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "account_id",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Accounts",
                    "V1"
                ]
            }
        }
    }
}